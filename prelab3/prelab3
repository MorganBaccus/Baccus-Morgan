Morgan Baccus
CptS 360
PreLab 3

1.
What's a process?
	A process is the execution of an image.
	An image is the memory area with code, data, and stack sections.
	     
What's the meaning of:
   pid? 
        The pid is the process ID number.
   ppid?
	The ppid is the process ID number of the parent process.
   status? 
        The current status code, either free or ready.
   priority? 
        The scheduling priority of the process (zero is the lowest).
   event? 
        The event value to sleep on.
	When the event represented by that value occurs, the process will be put to sleep.
   exitCode? 
        The value to return to the parent process when the process exits.
 
What are the PROC pointers child, sibling, parent used for? 
        The child represents the first child PROC pointer.
	The sibling represents the sibling PROC pointer.
	The parent represents the PROC pointer of the parent.
	They are used to create a family tree of the processes.
	This makes it easier and quicker to find the child processes of a particular process when it terminates.
	The orphan children can also be eaisly attached to a new process with these pointers.
	The parent pointer is for convience.
	     

2. Download samples/LAB3pre/mtx. Run it under Linux.
	Nothing to record.


3. COMMANDS:

ps	: display procs with pid, ppid, status; same as ps in Unix/Linux
fork	: READ kfork()
        kfork() creates a child task and adds that child task to the readyQueue.
switch	: READ tswitch() 
        tswitch() switches from one process context to another in three parts.
	First it saves the return address and the values of the registers visible to a linux process in user mode onto the calling task's stack.
	Then it calls the scheduler to pick the next running task.
	Then, whichever proc is running when the scheduler returns is the current task.
	The cpu stack pointer is set to that current task, the saved registers are popped, and the return address is popped causing the return to wherever tswitch was called from.
exit	: READ kexit()
        kexit() does 5 things:
		1: Erases process user-mode context.
		2: Disposes of the child processes. 
		3: Documents the exitValue in PROC.exitCode for the parent to reference. 
		4: Becomes a "zombie". 
		5: Wakes up parent and init process if necessary.
sleep	: READ ksleep() 
        ksleep() is dependent on the wakeup of another process and therefore stops a process from completing a set portion of tasks.
wakeup	: READ kwakeup() 
        kwakeup() triggers any dependent processes.
wait	: READ kwait()
        kwait() is implemented when a parent process must wait for a child process to compelete.


4. Step 1: test fork
While P1 running, enter fork: 
        When P1 is running and you fork, P2 becomes the child of P1, enters the ready queue, and gains a priority of 1.
Enter fork many times; 
    How many times can P1 fork? 
	In this example, fork fails after 7 times (on the 8th try) because there are no more free processes.

	
5. Step 2: Test sleep/wakeup
While P1 running, fork a child P2;
Switch to run P2. Where did P1 go? 
	P1 is placed in the readyQueue by the scheduler. Since P2 is higher in the queue, the scheduler runs P2 and P1 stays in the readyQueue.
	
P2 running: Enter sleep, with a value, to let P2 SLEEP. What happens? 
        When we have P2 sleep on event value 123, P1 is moved from the readyQueue to run and P2 is placed in the sleep queue with it's event value.

Now, P1 should be running. Enter wakeup with a value, e.g. 234 Did any proc wake up? 
        No processes will wake up with the wakeup value 234 because there aren't any processes in the sleep list that have that event value.

P1: Enter wakeup with 123, what happens? 
        When wakeup is called with an event value of 123, P2 wakes up and is removed from the sleep queue and moved to the readyQueue.


6. Step 3: test child exit/parent wait
When a proc dies (exit) with a value, it becomes a ZOMBIE, wakeup its parent.
Parent may issue wait to wait for a ZOMBIE child, and frees the ZOMBIE

Run mtx;
P1: enter wait; What happens?
	Nothing happens with wait on P1 because P1 has no children.


7. CASE 1:
Which process runs now? 
        The process with ID of 123 because there are resources available to run it now. 

P2 status = ?
	ZOMBIE

(P1 still running) enter wait; What happens?
        P1 sleeps.
enter ps;   What happened to P2?
        P2 begins its process.

CASE 2:
P1: enter fork to fork a child P3
P1: enter wait;  What happens to P1? WHY?
        P1 goes to sleep.

P3: Enter exit with a value; What happens?
        The process returns the value entered and terminates the process.

P1: enter ps;  What's the status of P3? WHY? 
        Zombie
	
     
8.	      
Run mtx again.
P1: fork child P2, Switch to P2.
P2: fork several children of its own, e.g. P3, P4, P5 (all in its childList).
P2: exit with a value.

P1 should be running WHY?
        There are resources available for it and it is at the top of the queue.

P1: enter ps to see proc status: which proc is ZOMBIE?
        P2

What happened to P2's children? 
        They are also zombies.

P1: enter wait; What happens? 
        P1 stops its process.

P1: enter wait again; What happens? WHY?
        P1 starts again.

How to let P1 READY to run again?
        Check the status and then call the appropriate commands to run P1.

